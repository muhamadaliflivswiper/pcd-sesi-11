# -*- coding: utf-8 -*-
"""PCD_S11_Implementasi Segmentasi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ibSUtuN1qyK6nyqLOU_Rfbq_KXQTrzvv
"""

import numpy as np
import matplotlib.pyplot as plt
import imageio.v3 as iio
from scipy.ndimage import sobel, gaussian_filter

# Membaca gambar dalam skala abu-abu
def read_image(image_path):
    image = iio.imread(image_path, mode="L")  # Menggunakan mode grayscale
    return image.astype(np.float32) / 255.0  # Normalisasi ke rentang [0, 1]

# Mengurangi noise dengan Gaussian filter
def denoise_image(image, sigma=1):
    return gaussian_filter(image, sigma=sigma)

# Deteksi tepi menggunakan Sobel
def edge_detection(image):
    sobel_x = sobel(image, axis=0)
    sobel_y = sobel(image, axis=1)
    edges = np.hypot(sobel_x, sobel_y)
    return edges

# Segmentasi citra menggunakan thresholding dasar
def threshold_segmentation(edges, threshold=0.4):  # Untuk skala [0, 1]
    segmented = (edges > threshold).astype(np.uint8) * 255
    return segmented

# Visualisasi hasil
def visualize_results(original, denoised, edges, segmented):
    plt.figure(figsize=(20, 5))

    plt.subplot(1, 4, 1)
    plt.title("Original Image")
    plt.imshow(original, cmap="gray")
    plt.axis("off")

    plt.subplot(1, 4, 2)
    plt.title("Denoised Image")
    plt.imshow(denoised, cmap="gray")
    plt.axis("off")

    plt.subplot(1, 4, 3)
    plt.title("Edges (Sobel)")
    plt.imshow(edges, cmap="gray")
    plt.axis("off")

    plt.subplot(1, 4, 4)
    plt.title("Segmented Image")
    plt.imshow(segmented, cmap="gray")
    plt.axis("off")

    plt.tight_layout()
    plt.show()

# Main program
if __name__ == "__main__":
    # Path gambar
    image_path = "/content/Lena.jpeg" # Ganti dengan path gambar Anda

    # Membaca gambar
    original_image = read_image(image_path)

    # Mengurangi noise pada gambar
    denoised_image = denoise_image(original_image, sigma=1)

    # Melakukan deteksi tepi
    edges = edge_detection(denoised_image)

    # Segmentasi dengan thresholding
    threshold_value = 0.4  # Nilai threshold untuk skala [0, 1]
    segmented_image = threshold_segmentation(edges, threshold=threshold_value)

    # Visualisasi hasil
    visualize_results(original_image, denoised_image, edges, segmented_image)

    # Analisa hasil
    print("\nAnalisa Hasil:")
    print(f"Dimensi gambar asli: {original_image.shape}")
    print(f"Total pixel di segmentasi (putih): {np.sum(segmented_image == 255)}")
    print(f"Total pixel di background (hitam): {np.sum(segmented_image == 0)}")
